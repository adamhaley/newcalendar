{
  "name": "interval-query",
  "description": "A data structure for storing intervals and finding overlaps with either segment tree or sequential query",
  "homepage": "https://github.com/toberndo/interval-query",
  "version": "0.3.0",
  "author": {
    "name": "Thomas OberndÃ¶rfer",
    "email": "toberndo@yarkon.de"
  },
  "devDependencies": {
    "mocha": "0.12.x",
    "should": "0.5.x"
  },
  "keywords": [
    "segment",
    "interval",
    "range",
    "tree",
    "overlap"
  ],
  "main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/toberndo/interval-query.git"
  },
  "engines": {
    "node": ">= 0.4"
  },
  "license": "MIT",
  "readme": "# interval-query\n\ninterval-query is a Node.js module for storing number intervals and offers two different query methods: segment tree and sequential.\nThe main purpose of this module is to solve the following problem: given a set of intervals, how to find all overlapping intervals.\n\n## Installation\n\n    npm install query-interval\n\n## Example\n\n```js\nvar intervals = require('interval-query');\n\nvar tree = new intervals.SegmentTree;\n\ntree.pushInterval(1, 5);\ntree.pushInterval(2, 7);\ntree.pushInterval(3, 6);\ntree.buildTree();\nconsole.log(tree.queryOverlap());\n```\n\n## Segment tree\n\nOne method to query for overlapping intervals is to use a [Segment tree](http://en.wikipedia.org/wiki/Segment_tree).\nThe usage is as in the example above: we build a new tree object, push intervals to the data structure, build the tree and can\nthen run certain queries on the tree. The segment tree is a static structure which means we cannot add further intervals\nonce the tree is built. Rebuilding the tree is then required.\n\n![segment tree example](http://assets.yarkon.de/images/Segment_tree_instance.gif)\n\n## Sequential\n\nThe sequential algorithm simply traverses the array of intervals to search for overlaps. It builds up a dynamic structure\nwhere intervals can be added at any time. The interface is similar to the segment tree, but without tree specific methods.\nExample:\n\n```js\nvar intervals = require('interval-query');\n\nvar sequ = new intervals.Sequential;\n\nsequ.pushInterval(1, 5);\nsequ.pushInterval(2, 7);\nsequ.pushInterval(3, 6);\nconsole.log(sequ.queryInterval(6, 8));\nsequ.pushInterval(6.5, 7.33);\nconsole.log(sequ.queryInterval(6, 8));\n```\n\n## API\n\n### Segment tree and Sequential\n\n#####pushInterval(from, to)#####\nPush interval to interval stack.\n\n- `from`: interval start (number).\n- `to`: interval end (number).\n\n#####pushArray(from, to, validate)#####\nPush array of intervals.\n\n- `from`: interval start points (array).\n- `to`: interval end points (array).\n- `validate`: validate intervals (boolean, default: true).\n\n#####clearIntervalStack()#####\nClear the interval stack.\n\n#####queryPoint(point, resultFn)#####\nQuery single point.\n\n- `point`: (number).\n- `resultFn`: result array of intervals (function).\n- *Returns* overlapping intervals (number).\n\n#####queryPointArray(points, resultFn, validate)#####\nQuery multiple points.\n\n- `points`: (array).\n- `resultFn`: result array of intervals (function).\n- `validate`: validate points (boolean, default: true).\n- *Returns* overlapping intervals (number).\n\n#####queryInterval(from, to, options)#####\nQuery single interval.\n\n- `from`: interval start (number).\n- `to`: interval end (number).\n- `options`: (object).\n  - `endpoints`: include endpoints of interval in comparison, e.g. (1, 2) overlaps with (2, 3) (boolean, default: true).\n  - `resultFn`: result array of intervals (function).\n- *Returns* overlapping intervals (number).    \n\n#####queryIntervalArray(from, to, options)#####\nQuery multiple intervals.\n\n- `from`: interval start points (array).\n- `to`: interval end points (array).\n- `options`: (object).\n  - `endpoints`: include endpoints of interval in comparison, e.g. (1, 2) overlaps with (2, 3) (boolean, default: true).\n  - `resultFn`: result array of intervals (function).\n  - `validate`: validate intervals (boolean, default: true).\n- *Returns* overlapping intervals (number).\n\n#####queryOverlap()#####\nQuery overlapping intervals for all intervals of the stack.\n\n- *Returns* intervals (array).\n  - `id`: interval id (number).\n  - `from`: interval start (number).\n  - `to`: interval end (number).\n  - `overlap`: overlapping interval ids (array).\n\n### Segment tree only\n\n#####buildTree()#####\nBuild tree structure.\n#####printTree()#####\nPrints tree to console.\n#####printTreeTopDown()#####\nPrints tree to console top down.\n\n## Performance\n\nDetailed performance analysis in this blog post:\nhttp://www.chasinclouds.com/2012/02/segment-tree-implementation-in.html\n\n## Licence\n\nUse of this source code is governed by a MIT-style license that can be found in the LICENSE file.",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/toberndo/interval-query/issues"
  },
  "_id": "interval-query@0.3.0",
  "dist": {
    "shasum": "d0a54eb1701beea6de365716ab3c30d3c676c606"
  },
  "_from": "interval-query@",
  "_resolved": "https://registry.npmjs.org/interval-query/-/interval-query-0.3.0.tgz"
}
